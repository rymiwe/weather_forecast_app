<%# Consolidated Forecast View %>
<% content_for :title, @forecast ? "Weather for #{@forecast.address}" : "Weather Forecast" %>

<div class="app-container">
  <h1 class="text-3xl font-bold text-center mb-8">Weather Forecast</h1>
  
  <!-- Search form -->
  <div class="search-container">
    <%= form_with url: search_forecasts_path, method: :get, data: { turbo: false }, class: "search-form" do |form| %>
      <div class="search-input-container">
        <%= form.text_field :address, 
            value: @search_query, 
            class: "search-input", 
            placeholder: "Enter a location (city, zip code, or address)" %>
      </div>
      <%= form.submit "Get Forecast", 
          name: "button", 
          class: "search-button" %>
    <% end %>
  </div>

  <% if @forecast %>
    <div class="forecast-container">
      <div class="p-4 bg-white">
        <h2 class="text-2xl font-bold mb-4">
          <% if @forecast.present? %>
            <% location_name = @forecast.forecast_data&.dig('location', 'name') %>
            <% location_region = @forecast.forecast_data&.dig('location', 'region') %>
            <% location_country = @forecast.forecast_data&.dig('location', 'country') %>
            
            <% if location_name.present? %>
              Weather for <%= location_name %><%=
              if location_region.present?
                ", " + location_region
              end
              %><%=
              if location_country.present? && location_country != "United States of America"
                ", " + location_country
              end
              %>
            <% else %>
              Weather for <%= @forecast.address %>
            <% end %>
          <% else %>
            Weather Forecast
          <% end %>
        </h2>
        <% 
          # Get timezone offset from API if available
          timezone = nil
          if @forecast.forecast_data.present?
            timezone_id = @forecast.forecast_data.dig('location', 'tz_id')
            timezone = ActiveSupport::TimeZone[timezone_id] if timezone_id.present?
          end
          # Create time with proper timezone
          local_time = timezone.present? ? Time.current.in_time_zone(timezone) : Time.current
        %>
        <p class="text-sm text-gray-600"><%= local_time.strftime("%A, %B %d, %Y at %I:%M %p %Z") %></p>
      </div>
      
      <!-- Weather data display section -->
      <div class="weather-data p-4 bg-gray-100">
        <div class="forecast-cards">
          <!-- Current weather card -->
          <div class="forecast-card">
            <div class="text-center">
              <div class="text-blue-700 font-semibold text-sm">Today</div>
              <div class="text-xs text-gray-500"><%= local_time.strftime('%-m/%-d') %></div>
              
              <div class="forecast-icon">
                <% current_condition = @forecast.forecast_data&.dig('current_weather', 'condition') || 
                                       @forecast.forecast_data&.dig('current', 'condition') %>
                <%= render partial: 'shared/weather_api_icon', locals: { 
                  condition: current_condition || @forecast.conditions, 
                  size_class: 'w-20 h-20 mx-auto' 
                } %>
              </div>
              
              <div class="current-temp"><%= @forecast.current_temp_display %> now</div>
              <div class="high-low-temp"><%= @forecast.high_low_display %></div>
              <div class="condition-text"><%= @forecast.conditions.titleize %></div>
            </div>
          </div>
          
          <!-- Extended forecast -->
          <% if @forecast.daily_forecasts.present? %>
            <% days = get_forecast_days(@forecast.daily_forecasts, timezone&.name) %>
            <% 
              # Set the current date based on the location's timezone
              today = local_time.to_date
              # Filter out today from the forecast days to prevent duplication
              future_days = days.reject { |day| day[:date].to_date == today }
              # Take the next two days
              future_days.first(2).each do |day| 
            %>
              <div class="forecast-card">
                <div class="text-center">
                  <div class="text-blue-700 font-semibold text-sm"><%= day[:date].strftime('%a') %></div>
                  <div class="text-xs text-gray-500"><%= day[:date].strftime('%-m/%-d') %></div>
                  
                  <div class="forecast-icon">
                    <%= render partial: 'shared/weather_api_icon', locals: { 
                      condition: day[:condition], 
                      size_class: 'w-10 h-10 mx-auto' 
                    } %>
                  </div>
                  
                  <div class="high-low-temp"><%= format_temp(day[:high_temp], @units) %> / <%= format_temp(day[:low_temp], @units) %></div>
                  <div class="condition-text"><%= day[:condition].is_a?(Hash) ? day[:condition]['text'] : day[:condition].to_s.titleize %></div>
                </div>
              </div>
            <% end %>
          <% end %>
        </div>
      </div>
      
      <!-- Technical details section with toggle functionality -->
      <div data-controller="toggle" class="details-section">
        <!-- Toggle header -->
        <div class="p-2 text-right">
          <button 
            data-action="toggle#toggle"
            class="details-toggle-button"
          >
            <span class="details-text">Details</span>
            <span
              data-toggle-target="icon"
              class="details-icon"
            >▶</span>
          </button>
        </div>
        
        <!-- Content (hidden by default) -->
        <div 
          data-toggle-target="content"
          class="hidden p-4 details-content"
        >
          <!-- Metadata section -->
          <div class="mb-4">
            <h4 class="text-md font-semibold">Metadata</h4>
            <% 
              # Calculate cache expiry time
              cache_expiry = @forecast.queried_at + 30.minutes
              minutes_until_expiry = ((cache_expiry - Time.current) / 60).round
              
              # Convert queried_at to the location's timezone
              queried_at_local = timezone.present? ? @forecast.queried_at.in_time_zone(timezone) : @forecast.queried_at
            %>
            <table class="metadata-table mt-2">
              <tr>
                <td class="table-header">Queried At</td>
                <td>
                  <%= queried_at_local.strftime("%Y-%m-%d %I:%M %p %Z") %>
                </td>
              </tr>
              <tr>
                <td class="table-header">Cache Status</td>
                <td>
                  <%= @forecast.cache_fresh? ? "Fresh" : "Expired" %>
                  <% if @forecast.cache_fresh? %>
                    - Expires in <%= minutes_until_expiry > 0 ? "#{minutes_until_expiry} minutes" : "expired" %>
                  <% end %>
                </td>
              </tr>
              <tr>
                <td class="table-header">Display Units</td>
                <td><%= @forecast.display_units %></td>
              </tr>
              <tr>
                <td class="table-header">Query</td>
                <td><%= @forecast.address %></td>
              </tr>
            </table>
          </div>
          
          <!-- Raw weather data -->
          <h3 class="text-md font-semibold mb-2">Raw Weather Data</h3>
          <div class="overflow-x-auto">
            <pre class="raw-data-container p-2"><code><%= JSON.pretty_generate(@forecast.forecast_data || {}) %></code></pre>
          </div>
        </div>
      </div>
    </div>
  <% end %>
  
  <!-- Recent searches section -->
  <% if @recent_forecasts.present? && @recent_forecasts.any? %>
    <div class="mt-8">
      <h3 class="text-xl font-semibold mb-4">Recent Searches</h3>
      <div class="bg-white rounded shadow-md p-4">
        <div class="grid gap-2">
          <% @recent_forecasts.each do |forecast| %>
            <div class="p-2 hover:bg-gray-50 border-b border-gray-100 last:border-b-0">
              <%= link_to forecast.address, 
                  search_forecasts_path(address: forecast.address), 
                  class: "text-blue-500 hover:text-blue-700" %>
              <span class="text-xs text-gray-500">
                <%= time_ago_in_words(forecast.updated_at) %> ago
              </span>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  <% end %>
  
  <!-- JavaScript for format_temp in the browser -->
  <script>
  function format_temp(temp, units) {
    if (units === 'imperial') {
      return `${Math.round(temp)}°F`;
    } else {
      return `${Math.round(temp)}°C`;
    }
  }
  </script>
</div>
